#!/usr/bin/env python

# dattocli supports three commands. Each is delegated to the dattod binary
# through a unix socket, and replies are shown on stdout.
import argparse
from dattolib.start_backup_request_pb2 import StartBackupRequest
from dattolib.request_pb2 import Request
from dattolib import make_request_to_dattod
from dattolib.reply_builder import get_complete_info


def startbackup(args):
    request = Request()
    request.type = Request.START_BACKUP
    request.start_backup_request.type = args.backup_type
    for block_uuid, nbd_host, nbd_port in args.vector:
        vector = request.start_backup_request.vectors.add()
        vector.block_device_uuid = block_uuid
        vector.destination_host = nbd_host
        try:
            vector.destination_port = int(nbd_port)
        except ValueError:
            raise ValueError(nbd_port + " is not a valid port number")

    return request


def stopbackup(args):
    request = Request()
    request.type = Request.STOP_BACKUP
    request.stop_backup_request.job_uuid = args.job_uuid
    return request


def completestatusinfo(args):
    print get_complete_info()


def backupstatus(args):
    request = Request()
    request.type = Request.BACKUP_STATUS
    request.backup_status_request.job_uuid = args.job_uuid
    return request


# Returns a Request object that should be sent to dattod
def parse_args():

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help="sub-command help")

    start_parser = subparsers.add_parser('startbackup')
    start_parser.set_defaults(func=startbackup)

    # Add full/incremental to the parser group
    start_group = start_parser.add_mutually_exclusive_group(required=True)
    start_group.add_argument('-f', '--full', dest="backup_type",
                             action="store_const",
                             const=StartBackupRequest.FULL_BACKUP,
                             help="Do an incremental backup")
    start_group.add_argument('-i', '--incremental', dest="backup_type",
                             action="store_const",
                             const=StartBackupRequest.INCREMENTAL_BACKUP,
                             help="Do an incremental backup")

    # Add vector to parser
    start_parser.add_argument('--vector', nargs=3, required=True,
                              action="append",
                              metavar=('block_uuid', 'nbd_host', 'nbd_port'),
                              help="Source and destination information")

    stop_parser = subparsers.add_parser('stopbackup')
    stop_parser.set_defaults(func=stopbackup)
    stop_parser.add_argument('job_uuid',
                             help="Job UUID that should be stopped")

    status_parser = subparsers.add_parser('backupstatus')
    status_parser.set_defaults(func=backupstatus)
    status_parser.add_argument('job_uuid',
                               help="Job UUID to query")

    info_parser = subparsers.add_parser('completeinfo')
    info_parser.set_defaults(func=completestatusinfo)

    args = parser.parse_args()

    return args.func(args)


if __name__ == "__main__":
    # parse_args should only return if it has a message
    request = parse_args()
    if request:
        print request
        reply = make_request_to_dattod(request)
        print reply

