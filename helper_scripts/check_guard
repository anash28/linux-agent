#!/usr/bin/perl

  use strict;
  # use warnings;

  use File::Find;
  use Cwd qw{abs_path getcwd};
  use Getopt::Long;

  our $base;      #  Yuck.  Global variable to keep track of the base directory
                  #  for each iteration


  sub base_check {

    my ($string, $fullpath) = @_;

    my $adjpath = $fullpath;
    $adjpath =~ s{^$base}{};          # Strip base off front
    my $stringval = uc($adjpath);        # Get uppercase version of it
    $stringval =~ s{[/\.]}{_}g;           # and change '/' to '_'
    $stringval .= "_";                # then add one more '_' to the end
    $stringval = "DATTO_CLIENT_" . $stringval;

    return $string eq $stringval ? "" : "$stringval"; 

  }




  sub check_header {

    my $fname = $File::Find::name;
    my $fullpath = abs_path($fname);


    return unless -f "$fullpath";
    return unless $fullpath =~ m/\.h$/;

    if (! -r "$fullpath") {
      warn "$fullpath cannot be read; skipping";
      return;
    }



    open(my $fh, "<", "$fullpath") or
      warn "Error opening file $fullpath for input: $!", return;

    my $saw_ifndef = 0;
    my $ifndef_string;
    my $define_string;
    # my $saw_define = 0;

    while( my $line = <$fh> ) {

      chomp($line);          # Trim whitespace
      $line =~ s/^\s+//;
      $line =~ s/\s+$//;

      next if $line =~ m{^//};      # Ignore comment lines
      next if $line =~ m/^$/;       # Ignore empty lines


      if ($line =~ /^\#ifndef/) {
        ($ifndef_string) = ($line =~ m/\#ifndef\s+(\S+)/);
        $saw_ifndef = 1;
        next;
      } elsif ($line =~ /^\#define/ and $saw_ifndef) {
        ($define_string) = ($line =~ m/\#define\s+(\S+)/);
        if ($ifndef_string eq $define_string) {
          my $calculated_string = base_check($define_string, $fullpath);  
          if (! $calculated_string) {
            print "  Header file $fullpath passed\n";
          } else {
            print "* Header file $fullpath failed.. \n";
            print "    #define string was $define_string\n";
            print "    should have been   $calculated_string\n";
            last;
          }
        } else {
          print "* Header file $fullpath failed..  string mismatch\n";
          last;
        }
        last;
      } else {
        print "* Header file $fullpath failed\n";
        last;
      }

    }

    close($fh);

    return;
  }

######  MAIN   #######


  GetOptions("base=s" => \$base);

  $base = "";
  unless ($base) {        # If no base specified, use current working directory
    $base = getcwd();
    $base = abs_path($base);
    $base =~ s{/[^/]+$}{/};
  }
  print "Using base $base\n\n";


  if (scalar @ARGV < 1) {
    die "Error: must provide one or more directory/file names as arguments";
  }

  my %find_opts = (
    wanted => \&check_header,
    no_chdir => 1,
  );

  for my $tocheck (@ARGV) {

    my $chkpath = abs_path($tocheck);

    $base = $chkpath;

    while (! -d "$base") {         # Strip of ending until it is a directory
      $base =~ s{/[^/]+$}{};
    }

    $base .= "/" unless $base =~ m'/$';

    find(\%find_opts, $chkpath);

  }







  
 

    



