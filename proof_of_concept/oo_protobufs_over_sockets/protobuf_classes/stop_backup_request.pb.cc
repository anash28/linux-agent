// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stop_backup_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace datto_linux_client {

namespace {

const ::google::protobuf::Descriptor* StopBackupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopBackupRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stop_5fbackup_5frequest_2eproto() {
  protobuf_AddDesc_stop_5fbackup_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stop_backup_request.proto");
  GOOGLE_CHECK(file != NULL);
  StopBackupRequest_descriptor_ = file->message_type(0);
  static const int StopBackupRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopBackupRequest, block_path_),
  };
  StopBackupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopBackupRequest_descriptor_,
      StopBackupRequest::default_instance_,
      StopBackupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopBackupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopBackupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopBackupRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stop_5fbackup_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopBackupRequest_descriptor_, &StopBackupRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stop_5fbackup_5frequest_2eproto() {
  delete StopBackupRequest::default_instance_;
  delete StopBackupRequest_reflection_;
}

void protobuf_AddDesc_stop_5fbackup_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031stop_backup_request.proto\022\022datto_linux"
    "_client\"\'\n\021StopBackupRequest\022\022\n\nblock_pa"
    "th\030\001 \002(\t", 88);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stop_backup_request.proto", &protobuf_RegisterTypes);
  StopBackupRequest::default_instance_ = new StopBackupRequest();
  StopBackupRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stop_5fbackup_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stop_5fbackup_5frequest_2eproto {
  StaticDescriptorInitializer_stop_5fbackup_5frequest_2eproto() {
    protobuf_AddDesc_stop_5fbackup_5frequest_2eproto();
  }
} static_descriptor_initializer_stop_5fbackup_5frequest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int StopBackupRequest::kBlockPathFieldNumber;
#endif  // !_MSC_VER

StopBackupRequest::StopBackupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopBackupRequest::InitAsDefaultInstance() {
}

StopBackupRequest::StopBackupRequest(const StopBackupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopBackupRequest::SharedCtor() {
  _cached_size_ = 0;
  block_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopBackupRequest::~StopBackupRequest() {
  SharedDtor();
}

void StopBackupRequest::SharedDtor() {
  if (block_path_ != &::google::protobuf::internal::kEmptyString) {
    delete block_path_;
  }
  if (this != default_instance_) {
  }
}

void StopBackupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopBackupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopBackupRequest_descriptor_;
}

const StopBackupRequest& StopBackupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stop_5fbackup_5frequest_2eproto();  return *default_instance_;
}

StopBackupRequest* StopBackupRequest::default_instance_ = NULL;

StopBackupRequest* StopBackupRequest::New() const {
  return new StopBackupRequest;
}

void StopBackupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_path()) {
      if (block_path_ != &::google::protobuf::internal::kEmptyString) {
        block_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopBackupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_path().data(), this->block_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopBackupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_path = 1;
  if (has_block_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_path().data(), this->block_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopBackupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_path = 1;
  if (has_block_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_path().data(), this->block_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopBackupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_path = 1;
    if (has_block_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopBackupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopBackupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopBackupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopBackupRequest::MergeFrom(const StopBackupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_path()) {
      set_block_path(from.block_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopBackupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopBackupRequest::CopyFrom(const StopBackupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopBackupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StopBackupRequest::Swap(StopBackupRequest* other) {
  if (other != this) {
    std::swap(block_path_, other->block_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopBackupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopBackupRequest_descriptor_;
  metadata.reflection = StopBackupRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace datto_linux_client

// @@protoc_insertion_point(global_scope)
