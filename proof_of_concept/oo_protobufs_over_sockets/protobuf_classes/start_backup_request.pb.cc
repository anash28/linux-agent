// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "start_backup_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace datto_linux_client {

namespace {

const ::google::protobuf::Descriptor* StartBackupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartBackupRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StartBackupRequest_BackupType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_start_5fbackup_5frequest_2eproto() {
  protobuf_AddDesc_start_5fbackup_5frequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "start_backup_request.proto");
  GOOGLE_CHECK(file != NULL);
  StartBackupRequest_descriptor_ = file->message_type(0);
  static const int StartBackupRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBackupRequest, block_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBackupRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBackupRequest, base_signature_),
  };
  StartBackupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartBackupRequest_descriptor_,
      StartBackupRequest::default_instance_,
      StartBackupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBackupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartBackupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartBackupRequest));
  StartBackupRequest_BackupType_descriptor_ = StartBackupRequest_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_start_5fbackup_5frequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartBackupRequest_descriptor_, &StartBackupRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_start_5fbackup_5frequest_2eproto() {
  delete StartBackupRequest::default_instance_;
  delete StartBackupRequest_reflection_;
}

void protobuf_AddDesc_start_5fbackup_5frequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::datto_linux_client::protobuf_AddDesc_base_5fsignature_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032start_backup_request.proto\022\022datto_linu"
    "x_client\032\024base_signature.proto\"\354\001\n\022Start"
    "BackupRequest\022\022\n\nblock_path\030\001 \002(\t\022\?\n\004typ"
    "e\030\002 \002(\01621.datto_linux_client.StartBackup"
    "Request.BackupType\0229\n\016base_signature\030\003 \001"
    "(\0132!.datto_linux_client.BaseSignature\"F\n"
    "\nBackupType\022\017\n\013FULL_BACKUP\020\001\022\026\n\022INCREMEN"
    "TAL_BACKUP\020\002\022\017\n\013DIFF_BACKUP\020\003", 309);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "start_backup_request.proto", &protobuf_RegisterTypes);
  StartBackupRequest::default_instance_ = new StartBackupRequest();
  StartBackupRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_start_5fbackup_5frequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_start_5fbackup_5frequest_2eproto {
  StaticDescriptorInitializer_start_5fbackup_5frequest_2eproto() {
    protobuf_AddDesc_start_5fbackup_5frequest_2eproto();
  }
} static_descriptor_initializer_start_5fbackup_5frequest_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* StartBackupRequest_BackupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartBackupRequest_BackupType_descriptor_;
}
bool StartBackupRequest_BackupType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StartBackupRequest_BackupType StartBackupRequest::FULL_BACKUP;
const StartBackupRequest_BackupType StartBackupRequest::INCREMENTAL_BACKUP;
const StartBackupRequest_BackupType StartBackupRequest::DIFF_BACKUP;
const StartBackupRequest_BackupType StartBackupRequest::BackupType_MIN;
const StartBackupRequest_BackupType StartBackupRequest::BackupType_MAX;
const int StartBackupRequest::BackupType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StartBackupRequest::kBlockPathFieldNumber;
const int StartBackupRequest::kTypeFieldNumber;
const int StartBackupRequest::kBaseSignatureFieldNumber;
#endif  // !_MSC_VER

StartBackupRequest::StartBackupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartBackupRequest::InitAsDefaultInstance() {
  base_signature_ = const_cast< ::datto_linux_client::BaseSignature*>(&::datto_linux_client::BaseSignature::default_instance());
}

StartBackupRequest::StartBackupRequest(const StartBackupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartBackupRequest::SharedCtor() {
  _cached_size_ = 0;
  block_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  base_signature_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartBackupRequest::~StartBackupRequest() {
  SharedDtor();
}

void StartBackupRequest::SharedDtor() {
  if (block_path_ != &::google::protobuf::internal::kEmptyString) {
    delete block_path_;
  }
  if (this != default_instance_) {
    delete base_signature_;
  }
}

void StartBackupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartBackupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartBackupRequest_descriptor_;
}

const StartBackupRequest& StartBackupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_start_5fbackup_5frequest_2eproto();  return *default_instance_;
}

StartBackupRequest* StartBackupRequest::default_instance_ = NULL;

StartBackupRequest* StartBackupRequest::New() const {
  return new StartBackupRequest;
}

void StartBackupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_path()) {
      if (block_path_ != &::google::protobuf::internal::kEmptyString) {
        block_path_->clear();
      }
    }
    type_ = 1;
    if (has_base_signature()) {
      if (base_signature_ != NULL) base_signature_->::datto_linux_client::BaseSignature::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartBackupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_path().data(), this->block_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .datto_linux_client.StartBackupRequest.BackupType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::datto_linux_client::StartBackupRequest_BackupType_IsValid(value)) {
            set_type(static_cast< ::datto_linux_client::StartBackupRequest_BackupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_base_signature;
        break;
      }
      
      // optional .datto_linux_client.BaseSignature base_signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartBackupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_path = 1;
  if (has_block_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_path().data(), this->block_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_path(), output);
  }
  
  // required .datto_linux_client.StartBackupRequest.BackupType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional .datto_linux_client.BaseSignature base_signature = 3;
  if (has_base_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->base_signature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartBackupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_path = 1;
  if (has_block_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_path().data(), this->block_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_path(), target);
  }
  
  // required .datto_linux_client.StartBackupRequest.BackupType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional .datto_linux_client.BaseSignature base_signature = 3;
  if (has_base_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->base_signature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartBackupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_path = 1;
    if (has_block_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_path());
    }
    
    // required .datto_linux_client.StartBackupRequest.BackupType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .datto_linux_client.BaseSignature base_signature = 3;
    if (has_base_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_signature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartBackupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartBackupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartBackupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartBackupRequest::MergeFrom(const StartBackupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_path()) {
      set_block_path(from.block_path());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_base_signature()) {
      mutable_base_signature()->::datto_linux_client::BaseSignature::MergeFrom(from.base_signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartBackupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartBackupRequest::CopyFrom(const StartBackupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartBackupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StartBackupRequest::Swap(StartBackupRequest* other) {
  if (other != this) {
    std::swap(block_path_, other->block_path_);
    std::swap(type_, other->type_);
    std::swap(base_signature_, other->base_signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartBackupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartBackupRequest_descriptor_;
  metadata.reflection = StartBackupRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace datto_linux_client

// @@protoc_insertion_point(global_scope)
